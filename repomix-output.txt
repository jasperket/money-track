This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-27T09:10:56.558Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
.prettierrc
index.html
package.json
README.md
src/assets/add.svg
src/assets/close.svg
src/assets/delete_fill.svg
src/assets/delete.svg
src/expenses.html
src/index.html
src/scripts/classes/Category.js
src/scripts/classes/Transaction.js
src/scripts/components/CashFlowChart.js
src/scripts/components/CategoryCard.js
src/scripts/components/ExpenseDIstributionChart.js
src/scripts/components/IncomeExpenseDonutChart.js
src/scripts/components/MonthlyComparisonChart.js
src/scripts/components/ReadOnlyTransactionItem.js
src/scripts/components/TransactionItem.js
src/scripts/components/WeeklySpendingChart.js
src/scripts/expenses.js
src/scripts/index.js
src/scripts/utils/helpers.js
src/scripts/utils/placeholderData.js
src/styles/output.css
src/styles/reset.css
src/styles/style.css
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
node_modules
# Dependencies
node_modules/
npm-debug.log
yarn-debug.log
yarn-error.log
.pnpm-debug.log

# Environment variables
.env
.env.local
.env.*.local

# Build output
dist/
build/
out/

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Cache directories
.cache/
.next/
.nuxt/
.temp/

================
File: .prettierrc
================
{
  "plugins": ["prettier-plugin-tailwindcss"]
}

================
File: index.html
================
<!doctype html> <meta http-equiv="refresh" content="0; url=src/index.html" />

================
File: package.json
================
{
  "name": "expert-js",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "prettier": "^3.3.3",
    "prettier-plugin-tailwindcss": "^0.6.9",
    "tailwindcss": "^3.4.15"
  }
}

================
File: README.md
================
# MoneyTrack

A simple personal finance tracker built with HTML, JavaScript, and Tailwind CSS. Track your income and expenses with visual charts and category management.

## Features

- Track income and expenses by categories
- Visual dashboard with interactive charts
- Recent transactions overview
- Responsive design for all devices
- Local storage for data persistence

## Tech Stack

- HTML5
- Tailwind CSS
- Vanilla JavaScript
- Chart.js for visualizations

================
File: src/assets/add.svg
================
<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#FFFFFF"><path d="M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z"/></svg>

================
File: src/assets/close.svg
================
<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#4ade80"><path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z"/></svg>

================
File: src/assets/delete_fill.svg
================
<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#FFFFFF"><path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm80-160h80v-360h-80v360Zm160 0h80v-360h-80v360Z"/></svg>

================
File: src/assets/delete.svg
================
<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#FFFFFF"><path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z"/></svg>

================
File: src/expenses.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MoneyTrack</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="./styles/reset.css" />
    <link rel="stylesheet" href="./styles/output.css" />
  </head>
  <body class="ml-auto mr-auto bg-zinc-950 px-32 font-sans text-white">
    <!-- Components -->
    <!-- Transaction Item Template -->
    <template id="transaction-template">
      <div
        class="animate-transaction grid grid-cols-4 items-center rounded bg-zinc-900 p-2 text-center opacity-0"
      >
        <p class="transaction-name">Bus</p>
        <p class="transaction-amount border-x border-green-400">â‚±50.00</p>
        <p class="transaction-date">11/25/2024</p>
        <div class="flex items-center justify-center">
          <img
            src="assets/delete.svg"
            alt="Delete transaction"
            class="delete-transaction cursor-pointer rounded-full p-1.5 transition-colors hover:bg-red-950"
          />
        </div>
      </div>
    </template>

    <!-- Category Card Template -->
    <template id="category-card-template">
      <div class="rounded-xl border border-green-400 p-6">
        <div class="flex items-center gap-2">
          <!-- Category Name -->
          <h2 class="text-2xl font-bold text-green-400">Transportation</h2>
          <img src="assets/delete.svg" alt="" class="delete cursor-pointer" />
          <!-- Category Type -->
          <p class="ml-auto">Expenses</p>
        </div>
        <div class="mt-4 flex h-48 flex-col gap-2 overflow-y-scroll">
          <!-- Transactions will be rendered here -->
        </div>
        <form action="POST" class="mt-4 flex justify-center gap-2">
          <input
            type="text"
            name="transactionName"
            id="transactionName"
            placeholder="Name"
            class="w-full rounded bg-zinc-900 p-2 text-white"
          />
          <input
            type="text"
            name="transactionAmount"
            id="transactionAmount"
            placeholder="Amount"
            class="w-full rounded bg-zinc-900 p-2 text-white"
          />
          <input
            type="date"
            name="transactionDate"
            id="transactionDate"
            placeholder="Date"
            class="rounded bg-zinc-900 p-2 text-white"
          />
          <button
            class="flex gap-2 rounded bg-green-700 p-2 px-4 transition-colors hover:bg-green-800"
          >
            Add
          </button>
        </form>
      </div>
    </template>

    <!-- Add Category Dialog -->
    <dialog
      id="add-category-dialog"
      class="animate-dialog rounded-lg bg-zinc-900 p-8 text-white"
    >
      <div class="flex items-center justify-between">
        <p class="text-2xl font-bold">New Category</p>
        <img
          id="add-category-close"
          src="assets/close.svg"
          alt=""
          class="cursor-pointer rounded-full p-1 transition-colors hover:bg-green-950"
        />
      </div>
      <form action="POST" class="mt-4 flex flex-col gap-4">
        <div class="flex flex-col gap-2">
          <label for="name">Category</label>
          <input
            type="text"
            id="name"
            name="name"
            class="w-full rounded-lg bg-zinc-950 p-2 text-white"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label for="type">Type</label>
          <select
            name="type"
            id="type"
            class="w-full rounded-lg bg-zinc-950 p-3 text-white"
          >
            <option value="income">Income</option>
            <option value="expense">Expense</option>
          </select>
        </div>
        <button
          type="submit"
          class="w-full rounded bg-green-700 p-2 transition-colors hover:bg-green-800"
          id="submit-category"
        >
          Add New Category
        </button>
      </form>
    </dialog>

    <!-- Confirmation Dialog -->
    <dialog
      id="confirm-dialog"
      class="animate-dialog rounded-lg bg-zinc-900 p-8 text-white"
    >
      <div class="flex flex-col gap-4">
        <div class="flex items-center justify-between">
          <p class="text-2xl font-bold">Confirm Delete</p>
          <img
            id="confirm-dialog-close"
            src="assets/close.svg"
            alt=""
            class="cursor-pointer rounded-full p-1 transition-colors hover:bg-green-950"
          />
        </div>
        <p id="confirm-message">Are you sure you want to delete this item?</p>
        <div class="mt-2 flex justify-end gap-2">
          <button
            id="confirm-cancel"
            class="rounded bg-zinc-700 px-4 py-2 transition-colors hover:bg-zinc-800"
          >
            Cancel
          </button>
          <button
            id="confirm-delete"
            class="rounded bg-red-700 px-4 py-2 transition-colors hover:bg-red-800"
          >
            Delete
          </button>
        </div>
      </div>
    </dialog>

    <header>
      <nav class="flex items-center gap-12 py-4">
        <h1 class="text-4xl font-bold text-green-400">MoneyTrack</h1>
        <a href="./index.html" class="transition-all hover:underline"
          >Dashboard
        </a>
        <a href="./expenses.html" class="hover:underline">Expenses</a>
      </nav>
    </header>
    <main class="mt-4">
      <!-- Add Category Button -->
      <button
        id="add-category-btn"
        class="flex gap-2 rounded bg-green-700 p-2 px-4 transition-colors hover:bg-green-800"
      >
        <img src="assets/add.svg" alt="" />
        Add Category
      </button>
      <section id="categories-container" class="mt-8 grid grid-cols-12 gap-8">
        <!-- Category cards will be rendered here by JavaScript -->
      </section>
    </main>
    <script type="module" src="./scripts/expenses.js"></script>
  </body>
</html>

================
File: src/index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MoneyTrack</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="./styles/reset.css" />
    <link rel="stylesheet" href="./styles/output.css" />
  </head>
  <body class="ml-auto mr-auto bg-zinc-950 px-4 font-sans text-white 2xl:px-32">
    <!-- Components -->
    <!-- Read-only Transaction Item Template -->
    <template id="readonly-transaction-template">
      <div
        class="animate-transaction grid grid-cols-3 items-center overflow-x-scroll rounded bg-zinc-900 p-2 text-center opacity-0"
      >
        <p class="transaction-name">Bus</p>
        <p class="transaction-amount border-x border-green-400">â‚±50.00</p>
        <p class="transaction-date">11/25/2024</p>
      </div>
    </template>

    <header>
      <nav
        class="flex flex-wrap items-center justify-center gap-12 py-4 sm:justify-start"
      >
        <h1 class="text-4xl font-bold text-green-400">MoneyTrack</h1>
        <div class="flex items-center gap-12">
          <a href="./index.html" class="transition-all hover:underline"
            >Dashboard</a
          >
          <a href="./expenses.html" class="hover:underline">Expenses</a>
        </div>
      </nav>
    </header>
    <main>
      <div class="mt-8 flex flex-wrap gap-8">
        <!-- Current Balance -->
        <div
          class="relative w-full rounded-xl border border-green-400 p-4 sm:w-64"
        >
          <h2 class="absolute left-4 top-[-0.75rem] z-10 bg-zinc-950 px-1">
            Balance
          </h2>
          <p id="currentBalance" class="text-4xl font-bold text-green-400">
            â‚±0.00
          </p>
        </div>

        <!-- Expenses -->
        <div
          class="relative flex w-full flex-col gap-4 rounded-xl border border-green-400 p-4 sm:w-64"
        >
          <h2 class="absolute left-4 top-[-0.75rem] z-10 bg-zinc-950 px-1">
            Expenses
          </h2>
          <p id="expenses" class="text-4xl font-bold text-green-400">â‚±0.00</p>
        </div>

        <!-- Income -->
        <div
          class="relative flex w-full flex-col gap-4 rounded-xl border border-green-400 p-4 sm:w-64"
        >
          <h2 class="absolute left-4 top-[-0.75rem] z-10 bg-zinc-950 px-1">
            Income
          </h2>
          <p id="income" class="text-4xl font-bold text-green-400">â‚±0.00</p>
        </div>

        <!-- Expenses and Income options -->
        <select
          name="period"
          id="period-select"
          class="w-full self-center rounded-lg bg-zinc-900 p-4 text-white sm:w-min"
        >
          <option value="total">Total</option>
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
        </select>
      </div>

      <!-- Dashboard -->
      <section class="mt-8 grid grid-cols-12 gap-8">
        <!-- Recent Transactions -->
        <div
          class="relative col-span-12 flex h-80 flex-col gap-4 rounded-xl border border-green-400 p-6 md:col-span-6 2xl:col-span-4"
        >
          <h2
            class="absolute top-[-1rem] bg-zinc-950 px-2 text-2xl font-bold text-white"
          >
            Recent Transactions
          </h2>
          <div
            id="recent-transactions"
            class="mt-2 flex flex-col gap-2 overflow-y-scroll"
          >
            <!-- Transactions will be rendered here -->
          </div>
        </div>

        <!-- Cash Flow Trend Chart -->
        <div
          class="relative col-span-12 flex h-80 flex-col gap-4 rounded-xl border border-green-400 p-6 md:col-span-6 2xl:col-span-4"
        >
          <h2
            class="absolute top-[-1rem] bg-zinc-950 px-2 text-2xl font-bold text-white"
          >
            Cash Flow
          </h2>
          <div class="mt-2 flex items-center justify-center">
            <cash-flow-chart></cash-flow-chart>
          </div>
        </div>

        <!-- Expenses Distribution Pie Chart -->
        <div
          class="relative col-span-12 flex h-80 flex-col gap-4 rounded-xl border border-green-400 p-6 md:col-span-6 2xl:col-span-4"
        >
          <h2
            class="absolute top-[-1rem] bg-zinc-950 px-2 text-2xl font-bold text-white"
          >
            Expenses Distribution
          </h2>
          <div class="mt-2 flex items-center justify-center">
            <expense-distribution-chart></expense-distribution-chart>
          </div>
        </div>

        <!-- Weekly Spending Breakdown Stacked Bar Chart -->
        <div
          class="relative col-span-12 flex h-80 flex-col gap-4 rounded-xl border border-green-400 p-6 md:col-span-6 2xl:col-span-4"
        >
          <h2
            class="absolute top-[-1rem] bg-zinc-950 px-2 text-2xl font-bold text-white"
          >
            Weekly Spending
          </h2>
          <div class="mt-2 flex items-center justify-center">
            <weekly-spending-chart></weekly-spending-chart>
          </div>
        </div>

        <!-- Monthly Comparison Bar Chart -->
        <div
          class="relative col-span-12 flex h-80 flex-col gap-4 rounded-xl border border-green-400 p-6 md:col-span-6 2xl:col-span-4"
        >
          <h2
            class="absolute top-[-1rem] bg-zinc-950 px-2 text-2xl font-bold text-white"
          >
            Monthly Spending
          </h2>
          <div class="mt-2 flex items-center justify-center">
            <monthly-comparison-chart></monthly-comparison-chart>
          </div>
        </div>

        <!-- Income vs Expense Breakdown Pie Chart -->
        <div
          class="relative col-span-12 flex h-80 flex-col gap-4 rounded-xl border border-green-400 p-6 md:col-span-6 2xl:col-span-4"
        >
          <h2
            class="absolute top-[-1rem] bg-zinc-950 px-2 text-2xl font-bold text-white"
          >
            Income vs Expenses
          </h2>
          <div class="mt-2 flex items-center justify-center">
            <income-expense-chart></income-expense-chart>
          </div>
        </div>
      </section>
    </main>
    <script type="module" src="./scripts/index.js"></script>
  </body>
</html>

================
File: src/scripts/classes/Category.js
================
export class Category {
  constructor(name, type) {
    this.name = name;
    this.type = type;
  }
  addTransaction(transaction) {
    this.transactions.push(transaction);
  }
}

================
File: src/scripts/classes/Transaction.js
================
export class Transaction {
  constructor(name, amount, date) {
    this.name = name;
    this.amount = amount;
    this.date = date;
  }
}

================
File: src/scripts/components/CashFlowChart.js
================
class CashFlowChart extends HTMLElement {
  constructor() {
    super();
    this.chart = null;
    this.loadChartJS();
  }

  async loadChartJS() {
    if (!window.Chart) {
      const script = document.createElement("script");
      script.src =
        "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js";
      script.async = true;
      script.onload = () => {
        this.render();
        // Add resize listener after chart is created
        window.addEventListener("resize", this.handleResize.bind(this));
      };
      document.head.appendChild(script);
    } else {
      this.render();
      window.addEventListener("resize", this.handleResize.bind(this));
    }
  }

  // Handle window resize
  handleResize() {
    if (this.chart) {
      this.chart.resize();
    }
  }

  connectedCallback() {
    this.setupEventListeners();
    // Add CSS styles when component is connected
    this.setupStyles();
  }

  disconnectedCallback() {
    if (this.chart) {
      this.chart.destroy();
    }
    window.removeEventListener("storage", this.updateChart);
    window.removeEventListener("resize", this.handleResize);
  }

  setupStyles() {
    // Add styles to make the component responsive
    this.style.display = "block";
    this.style.width = "100%";
    this.style.height = "15rem"; // Increased height for better visibility
    this.style.position = "relative";
  }

  setupEventListeners() {
    this.updateChart = this.updateChart.bind(this);
    window.addEventListener("storage", this.updateChart);
  }

  processData() {
    const categories = JSON.parse(localStorage.getItem("categories")) || [];
    const dailyTotals = new Map();

    categories.forEach((category) => {
      if (!category.transactions) return;

      category.transactions.forEach((transaction) => {
        const date = new Date(transaction.date).toISOString().split("T")[0];
        const amount = parseFloat(transaction.amount);

        if (!dailyTotals.has(date)) {
          dailyTotals.set(date, { income: 0, expenses: 0, balance: 0 });
        }

        const daily = dailyTotals.get(date);
        if (category.type === "income") {
          daily.income += amount;
        } else {
          daily.expenses += amount;
        }
        daily.balance = daily.income - daily.expenses;
      });
    });

    return Array.from(dailyTotals.entries()).sort(
      (a, b) => new Date(a[0]) - new Date(b[0]),
    );
  }

  createChart(canvas) {
    if (!window.Chart) {
      console.error("Chart.js not loaded");
      return;
    }

    const sortedData = this.processData();

    const labels = sortedData.map(([date]) => {
      return new Date(date).toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
      });
    });

    const incomeData = sortedData.map(([_, data]) => data.income);
    const expensesData = sortedData.map(([_, data]) => data.expenses);
    const balanceData = sortedData.map(([_, data]) => data.balance);

    const ctx = canvas.getContext("2d");
    return new window.Chart(ctx, {
      type: "line",
      data: {
        labels: labels,
        datasets: [
          {
            label: "Income",
            data: incomeData,
            borderColor: "#4ade80", // green-400
            backgroundColor: "rgba(74, 222, 128, 0.1)",
            tension: 0.4,
            fill: true,
          },
          {
            label: "Expenses",
            data: expensesData,
            borderColor: "#f87171", // red-400
            backgroundColor: "rgba(248, 113, 113, 0.1)",
            tension: 0.4,
            fill: true,
          },
          {
            label: "Balance",
            data: balanceData,
            borderColor: "#60a5fa", // blue-400
            backgroundColor: "rgba(96, 165, 250, 0.1)",
            tension: 0.4,
            fill: true,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "top",
            labels: {
              color: "#ffffff",
              padding: 20,
              font: {
                size: 14,
              },
            },
          },
          tooltip: {
            mode: "index",
            intersect: false,
            callbacks: {
              label: function (context) {
                return `${context.dataset.label}: ${new Intl.NumberFormat(
                  "en-PH",
                  {
                    style: "currency",
                    currency: "PHP",
                  },
                ).format(context.raw)}`;
              },
            },
          },
        },
        scales: {
          x: {
            grid: {
              color: "rgba(255, 255, 255, 0.1)",
            },
            ticks: {
              color: "#ffffff",
              font: {
                size: 12,
              },
            },
          },
          y: {
            grid: {
              color: "rgba(255, 255, 255, 0.1)",
            },
            ticks: {
              color: "#ffffff",
              font: {
                size: 12,
              },
              callback: function (value) {
                return new Intl.NumberFormat("en-PH", {
                  style: "currency",
                  currency: "PHP",
                  maximumFractionDigits: 0,
                }).format(value);
              },
            },
          },
        },
        interaction: {
          intersect: false,
          mode: "index",
        },
        layout: {
          padding: {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20,
          },
        },
      },
    });
  }

  updateChart() {
    if (this.chart) {
      this.chart.destroy();
    }
    const canvas = this.querySelector("canvas");
    if (canvas) {
      this.chart = this.createChart(canvas);
    }
  }

  render() {
    // Create wrapper div for better sizing control
    const wrapper = document.createElement("div");
    wrapper.style.width = "100%";
    wrapper.style.height = "100%";
    wrapper.style.position = "relative";

    // Create canvas element
    const canvas = document.createElement("canvas");
    canvas.id = "cashFlowChart";
    wrapper.appendChild(canvas);

    // Clear any existing content and add the wrapper
    this.innerHTML = "";
    this.appendChild(wrapper);

    // Create the chart if Chart.js is loaded
    if (window.Chart) {
      this.chart = this.createChart(canvas);
    }
  }
}

// Register the custom element
customElements.define("cash-flow-chart", CashFlowChart);

export default CashFlowChart;

================
File: src/scripts/components/CategoryCard.js
================
import { formatCurrency } from "../utils/helpers.js";
import "./TransactionItem.js";

class CategoryCard extends HTMLElement {
  constructor() {
    super();
    this._category = null;
  }

  static get observedAttributes() {
    return ["name", "type"];
  }

  get category() {
    return this._category;
  }

  set category(value) {
    this._category = value;
    this.renderContent();
  }

  connectedCallback() {
    // Add the grid column classes to the custom element itself
    this.className = "col-span-12 xl:col-span-6 2xl:col-span-4";
    this.renderContent();
    this.setupEventListeners();
  }

  createFromTemplate() {
    const template = document.getElementById("category-card-template");
    const clone = template.content.cloneNode(true);

    // Set category name and type
    clone.querySelector("h2").textContent = this._category?.name || "";
    clone.querySelector("p").textContent =
      this._category?.type.charAt(0).toUpperCase() +
        this._category?.type.slice(1) || "";

    // Render existing transactions
    const transactionsContainer = clone.querySelector(".mt-4");

    if (this._category?.transactions?.length) {
      this._category.transactions.forEach((transaction, index) => {
        const transactionElement = this.createTransactionElement(transaction);
        // Add staggered animation delay based on index
        transactionElement.style.animationDelay = `${index * 100}ms`;
        transactionsContainer.appendChild(transactionElement);
      });
    }

    return clone;
  }

  createTransactionElement(transaction) {
    const transactionElement = document.createElement("transaction-item");
    transactionElement.transaction = transaction;
    return transactionElement;
  }

  handleDeleteTransaction(transactionId) {
    const confirmDialog = document.getElementById("confirm-dialog");
    const confirmMessage = document.getElementById("confirm-message");
    const confirmDelete = document.getElementById("confirm-delete");
    const confirmCancel = document.getElementById("confirm-cancel");
    const confirmClose = document.getElementById("confirm-dialog-close");

    confirmMessage.textContent =
      "Are you sure you want to delete this transaction?";

    const closeDialog = () => {
      confirmDialog.close();
      confirmDelete.removeEventListener("click", handleConfirm);
      confirmCancel.removeEventListener("click", handleCancel);
      confirmClose.removeEventListener("click", handleCancel);
    };

    const handleConfirm = () => {
      this.dispatchEvent(
        new CustomEvent("transactiondelete", {
          bubbles: true,
          detail: {
            categoryName: this._category.name,
            transactionId: transactionId,
          },
        }),
      );

      const transactionElement = this.querySelector(
        `[data-transaction-id="${transactionId}"]`,
      );
      if (transactionElement) {
        transactionElement.style.animation = "fadeOut 0.3s ease-out forwards";
        transactionElement.addEventListener("animationend", () => {
          transactionElement.remove();
        });
      }

      closeDialog();
    };

    const handleCancel = () => {
      closeDialog();
    };

    confirmDelete.addEventListener("click", handleConfirm);
    confirmCancel.addEventListener("click", handleCancel);
    confirmClose.addEventListener("click", handleCancel);

    confirmDialog.showModal();
  }

  handleDeleteCategory() {
    const confirmDialog = document.getElementById("confirm-dialog");
    const confirmMessage = document.getElementById("confirm-message");
    const confirmDelete = document.getElementById("confirm-delete");
    const confirmCancel = document.getElementById("confirm-cancel");
    const confirmClose = document.getElementById("confirm-dialog-close");

    confirmMessage.textContent =
      "Are you sure you want to delete this category and all its transactions?";

    const closeDialog = () => {
      confirmDialog.close();
      confirmDelete.removeEventListener("click", handleConfirm);
      confirmCancel.removeEventListener("click", handleCancel);
      confirmClose.removeEventListener("click", handleCancel);
    };

    const handleConfirm = () => {
      this.dispatchEvent(
        new CustomEvent("categorydelete", {
          bubbles: true,
          detail: {
            categoryName: this._category.name,
          },
        }),
      );
      closeDialog();
    };

    const handleCancel = () => {
      closeDialog();
    };

    confirmDelete.addEventListener("click", handleConfirm);
    confirmCancel.addEventListener("click", handleCancel);
    confirmClose.addEventListener("click", handleCancel);

    confirmDialog.showModal();
  }

  setupEventListeners() {
    // Form submission
    const form = this.querySelector("form");
    form.addEventListener("submit", this.handleAddTransaction.bind(this));

    // Delete category
    const deleteBtn = this.querySelector(".delete");
    deleteBtn.addEventListener("click", this.handleDeleteCategory.bind(this));

    // Make form inputs unique by adding category name to id
    const inputs = form.querySelectorAll("input");
    inputs.forEach((input) => {
      const baseName = input.id;
      input.id = `${baseName}-${this._category.name}`;
    });
  }

  handleAddTransaction(e) {
    e.preventDefault();
    const form = e.target;

    const newTransaction = {
      name: form.querySelector('[name="transactionName"]').value,
      amount: parseFloat(
        form.querySelector('[name="transactionAmount"]').value,
      ),
      date: form.querySelector('[name="transactionDate"]').value,
      id: Date.now().toString(),
    };

    // Validate input
    if (
      !newTransaction.name ||
      isNaN(newTransaction.amount) ||
      !newTransaction.date
    ) {
      alert("Please fill in all fields correctly");
      return;
    }

    // Initialize transactions array if it doesn't exist
    if (!this._category.transactions) {
      this._category.transactions = [];
    }

    // Dispatch the event
    this.dispatchEvent(
      new CustomEvent("transactionadded", {
        bubbles: true,
        detail: {
          categoryName: this._category.name,
          transaction: newTransaction,
        },
      }),
    );

    // Add new transaction to DOM with animation
    const transactionsContainer = this.querySelector(".mt-4");
    const transactionElement = this.createTransactionElement(newTransaction);

    // Add animation class and handle animation end
    transactionElement.classList.add("slide-in");
    transactionElement.addEventListener("animationend", () => {
      transactionElement.classList.remove("slide-in");
    });

    transactionsContainer.insertBefore(
      transactionElement,
      transactionsContainer.firstChild,
    );

    form.reset();
  }

  renderContent() {
    this.innerHTML = "";
    const content = this.createFromTemplate();
    this.appendChild(content);
  }
}

customElements.define("category-card", CategoryCard);

export default CategoryCard;

================
File: src/scripts/components/ExpenseDIstributionChart.js
================
class ExpenseDistributionChart extends HTMLElement {
  constructor() {
    super();
    this.chart = null;
    this.loadChartJS();
  }

  async loadChartJS() {
    if (!window.Chart) {
      const script = document.createElement("script");
      script.src =
        "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js";
      script.async = true;
      script.onload = () => {
        this.render();
        window.addEventListener("resize", this.handleResize.bind(this));
      };
      document.head.appendChild(script);
    } else {
      this.render();
      window.addEventListener("resize", this.handleResize.bind(this));
    }
  }

  handleResize() {
    if (this.chart) {
      this.chart.resize();
    }
  }

  connectedCallback() {
    this.setupEventListeners();
    this.setupStyles();
  }

  disconnectedCallback() {
    if (this.chart) {
      this.chart.destroy();
    }
    window.removeEventListener("storage", this.updateChart);
    window.removeEventListener("resize", this.handleResize);
  }

  setupStyles() {
    this.style.display = "block";
    this.style.width = "100%";
    this.style.height = "100%";
    this.style.position = "relative";
  }

  setupEventListeners() {
    this.updateChart = this.updateChart.bind(this);
    window.addEventListener("storage", this.updateChart);
  }

  processData() {
    const categories = JSON.parse(localStorage.getItem("categories")) || [];
    const expenseData = new Map();

    // Filter expense categories and calculate totals
    categories
      .filter((category) => category.type === "expense")
      .forEach((category) => {
        if (!category.transactions) return;

        const total = category.transactions.reduce((sum, transaction) => {
          return sum + parseFloat(transaction.amount);
        }, 0);

        if (total > 0) {
          expenseData.set(category.name, total);
        }
      });

    // If no data, add a placeholder
    if (expenseData.size === 0) {
      expenseData.set("No expenses yet", 1);
    }

    return expenseData;
  }

  generateColors(count) {
    const colors = [
      "#4ade80", // green-400
      "#f87171", // red-400
      "#60a5fa", // blue-400
      "#fbbf24", // amber-400
      "#a78bfa", // violet-400
      "#34d399", // emerald-400
      "#f472b6", // pink-400
      "#818cf8", // indigo-400
      "#fb923c", // orange-400
      "#2dd4bf", // teal-400
    ];

    while (colors.length < count) {
      const hue = (colors.length * 137.508) % 360;
      colors.push(`hsl(${hue}, 70%, 60%)`);
    }

    return colors;
  }

  createChart(canvas) {
    if (!window.Chart) {
      console.error("Chart.js not loaded");
      return;
    }

    const expenseData = this.processData();
    const labels = Array.from(expenseData.keys());
    const data = Array.from(expenseData.values());
    const colors = this.generateColors(labels.length);

    const total = data.reduce((sum, value) => sum + value, 0);

    Chart.defaults.color = "#ffffff"; // Set default text color to white for all charts

    const ctx = canvas.getContext("2d");
    return new window.Chart(ctx, {
      type: "doughnut",
      data: {
        labels: labels,
        datasets: [
          {
            data: data,
            backgroundColor: colors,
            borderColor: "rgb(9, 9, 11)", // zinc-950
            borderWidth: 2,
            hoverOffset: 15,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        cutout: "60%",
        plugins: {
          legend: {
            display: true,
            position: "right",
            align: "center",
            labels: {
              boxWidth: 15,
              padding: 15,
              color: "#ffffff",
              font: {
                size: 14,
                weight: "normal",
                family: "Inter, sans-serif",
              },
              usePointStyle: true,
              pointStyle: "circle",
              filter: function (legendItem, data) {
                return data.datasets[0].data[legendItem.index] > 0;
              },
            },
          },
          tooltip: {
            enabled: true,
            backgroundColor: "rgba(0, 0, 0, 0.8)",
            titleColor: "#ffffff",
            bodyColor: "#ffffff",
            padding: 12,
            callbacks: {
              label: function (context) {
                const value = context.raw;
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const percentage = ((value / total) * 100).toFixed(1);
                const formattedValue = new Intl.NumberFormat("en-PH", {
                  style: "currency",
                  currency: "PHP",
                }).format(value);
                return `${context.label}: ${formattedValue} (${percentage}%)`;
              },
            },
          },
        },
        layout: {
          padding: {
            top: 20,
            right: 20, // Increased to accommodate right legend
            bottom: 20,
            left: 20,
          },
        },
      },
    });
  }

  updateChart() {
    if (this.chart) {
      this.chart.destroy();
    }
    const canvas = this.querySelector("canvas");
    if (canvas) {
      this.chart = this.createChart(canvas);
    }
  }

  render() {
    const wrapper = document.createElement("div");
    wrapper.style.height = "15rem";
    wrapper.style.position = "relative";

    const canvas = document.createElement("canvas");
    canvas.id = "expenseDistributionChart";
    wrapper.appendChild(canvas);

    this.innerHTML = "";
    this.appendChild(wrapper);

    if (window.Chart) {
      this.chart = this.createChart(canvas);
    }
  }
}

customElements.define("expense-distribution-chart", ExpenseDistributionChart);

export default ExpenseDistributionChart;

================
File: src/scripts/components/IncomeExpenseDonutChart.js
================
class IncomeExpenseDistributionChart extends HTMLElement {
  constructor() {
    super();
    this.chart = null;
    this.loadChartJS();
  }

  async loadChartJS() {
    if (!window.Chart) {
      const script = document.createElement("script");
      script.src =
        "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js";
      script.async = true;
      script.onload = () => {
        this.render();
        window.addEventListener("resize", this.handleResize.bind(this));
      };
      document.head.appendChild(script);
    } else {
      this.render();
      window.addEventListener("resize", this.handleResize.bind(this));
    }
  }

  handleResize() {
    if (this.chart) {
      this.chart.resize();
    }
  }

  connectedCallback() {
    this.setupEventListeners();
    this.setupStyles();
  }

  disconnectedCallback() {
    if (this.chart) {
      this.chart.destroy();
    }
    window.removeEventListener("storage", this.updateChart);
    window.removeEventListener("resize", this.handleResize);
  }

  setupStyles() {
    this.style.display = "block";
    this.style.width = "100%";
    this.style.height = "100%";
    this.style.position = "relative";
  }

  setupEventListeners() {
    this.updateChart = this.updateChart.bind(this);
    window.addEventListener("storage", this.updateChart);
  }

  processData() {
    const categories = JSON.parse(localStorage.getItem("categories")) || [];
    const data = {
      income: new Map(),
      expenses: new Map(),
    };

    // First process income categories
    categories
      .filter((category) => category.type === "income")
      .forEach((category) => {
        if (!category.transactions) return;
        const total = category.transactions.reduce(
          (sum, transaction) => sum + parseFloat(transaction.amount),
          0,
        );
        if (total > 0) {
          data.income.set(category.name, total);
        }
      });

    // Then process expense categories
    categories
      .filter((category) => category.type === "expense")
      .forEach((category) => {
        if (!category.transactions) return;
        const total = category.transactions.reduce(
          (sum, transaction) => sum + parseFloat(transaction.amount),
          0,
        );
        if (total > 0) {
          data.expenses.set(category.name, total);
        }
      });

    // Add placeholders if no data
    if (data.income.size === 0) data.income.set("No income", 1);
    if (data.expenses.size === 0) data.expenses.set("No expenses", 1);

    return data;
  }

  generateColors(type, count) {
    if (type === "income") {
      const greenColors = [
        "#4ade80", // green-400
        "#34d399", // emerald-400
        "#2dd4bf", // teal-400
        "#22c55e", // green-500
        "#10b981", // emerald-500
      ];

      // If we need more colors, generate them in the green spectrum
      while (greenColors.length < count) {
        const hue = 120 + ((greenColors.length * 20) % 60); // Stay in green spectrum
        greenColors.push(`hsl(${hue}, 70%, 60%)`);
      }

      return greenColors.slice(0, count);
    } else {
      const redColors = [
        "#ef4444", // red-500
        "#f87171", // red-400
        "#fb923c", // orange-400
        "#f97316", // orange-500
        "#fbbf24", // amber-400
      ];

      // If we need more colors, generate them in the red spectrum
      while (redColors.length < count) {
        const hue = 0 + ((redColors.length * 20) % 60); // Stay in red spectrum
        redColors.push(`hsl(${hue}, 70%, 60%)`);
      }

      return redColors.slice(0, count);
    }
  }

  createChart(canvas) {
    if (!window.Chart) {
      console.error("Chart.js not loaded");
      return;
    }

    const data = this.processData();

    // Process expenses first, then income
    const expenseLabels = Array.from(data.expenses.keys());
    const expenseData = Array.from(data.expenses.values());
    const expenseColors = this.generateColors("expense", expenseLabels.length);

    const incomeLabels = Array.from(data.income.keys());
    const incomeData = Array.from(data.income.values());
    const incomeColors = this.generateColors("income", incomeLabels.length);

    // Combine data - putting expenses first, then income
    const combinedLabels = [...expenseLabels, ...incomeLabels];
    const combinedData = [...expenseData, ...incomeData];
    const combinedColors = [...expenseColors, ...incomeColors];

    const totalExpenses = expenseData.reduce((a, b) => a + b, 0);
    const totalIncome = incomeData.reduce((a, b) => a + b, 0);

    Chart.defaults.color = "#ffffff";

    const ctx = canvas.getContext("2d");
    return new window.Chart(ctx, {
      type: "doughnut",
      data: {
        labels: combinedLabels,
        datasets: [
          {
            data: combinedData,
            backgroundColor: combinedColors,
            borderColor: "rgb(9, 9, 11)", // zinc-950
            borderWidth: 2,
            hoverOffset: 15,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        cutout: "60%",
        plugins: {
          legend: {
            display: true,
            position: "right",
            align: "center",
            labels: {
              boxWidth: 15,
              padding: 15,
              color: "#ffffff",
              font: {
                size: 14,
                family: "Inter, sans-serif",
              },
              usePointStyle: true,
              pointStyle: "circle",
              filter: function (legendItem, data) {
                return data.datasets[0].data[legendItem.index] > 0;
              },
            },
          },
          tooltip: {
            enabled: true,
            backgroundColor: "rgba(0, 0, 0, 0.8)",
            titleColor: "#ffffff",
            bodyColor: "#ffffff",
            padding: 12,
            callbacks: {
              label: function (context) {
                const value = context.raw;
                const isExpense = context.dataIndex < expenseLabels.length;
                const total = isExpense ? totalExpenses : totalIncome;
                const percentage = ((value / total) * 100).toFixed(1);
                const formattedValue = new Intl.NumberFormat("en-PH", {
                  style: "currency",
                  currency: "PHP",
                }).format(value);
                return `${context.label}: ${formattedValue} (${percentage}%)`;
              },
              afterLabel: function (context) {
                const isExpense = context.dataIndex < expenseLabels.length;
                return `Type: ${isExpense ? "Expense" : "Income"}`;
              },
            },
          },
        },
        layout: {
          padding: {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20,
          },
        },
      },
    });
  }

  updateChart() {
    if (this.chart) {
      this.chart.destroy();
    }
    const canvas = this.querySelector("canvas");
    if (canvas) {
      this.chart = this.createChart(canvas);
    }
  }

  render() {
    const wrapper = document.createElement("div");
    wrapper.style.height = "15rem";
    wrapper.style.position = "relative";

    const canvas = document.createElement("canvas");
    canvas.id = "incomeExpenseChart";
    wrapper.appendChild(canvas);

    this.innerHTML = "";
    this.appendChild(wrapper);

    if (window.Chart) {
      this.chart = this.createChart(canvas);
    }
  }
}

customElements.define("income-expense-chart", IncomeExpenseDistributionChart);

export default IncomeExpenseDistributionChart;

================
File: src/scripts/components/MonthlyComparisonChart.js
================
class MonthlyComparisonChart extends HTMLElement {
  constructor() {
    super();
    this.chart = null;
    this.loadChartJS();
  }

  async loadChartJS() {
    if (!window.Chart) {
      const script = document.createElement("script");
      script.src =
        "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js";
      script.async = true;
      script.onload = () => {
        this.render();
        window.addEventListener("resize", this.handleResize.bind(this));
      };
      document.head.appendChild(script);
    } else {
      this.render();
      window.addEventListener("resize", this.handleResize.bind(this));
    }
  }

  handleResize() {
    if (this.chart) {
      this.chart.resize();
    }
  }

  connectedCallback() {
    this.setupEventListeners();
    this.setupStyles();
  }

  disconnectedCallback() {
    if (this.chart) {
      this.chart.destroy();
    }
    window.removeEventListener("storage", this.updateChart);
    window.removeEventListener("resize", this.handleResize);
  }

  setupStyles() {
    this.style.display = "block";
    this.style.width = "100%";
    this.style.height = "100%";
    this.style.position = "relative";
  }

  setupEventListeners() {
    this.updateChart = this.updateChart.bind(this);
    window.addEventListener("storage", this.updateChart);
  }

  processData() {
    const categories = JSON.parse(localStorage.getItem("categories")) || [];
    const monthlyData = new Map();

    // Initialize current month and previous month with zero values
    const today = new Date();
    const currentMonth = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, "0")}`;
    const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1);
    const previousMonth = `${lastMonth.getFullYear()}-${String(lastMonth.getMonth() + 1).padStart(2, "0")}`;

    // Initialize with zero values to ensure these months always appear
    monthlyData.set(currentMonth, { income: 0, expenses: 0 });
    monthlyData.set(previousMonth, { income: 0, expenses: 0 });

    // Process all transactions
    categories.forEach((category) => {
      if (!category.transactions) return;

      category.transactions.forEach((transaction) => {
        if (!transaction.date || !transaction.amount) return;

        const date = new Date(transaction.date);
        if (isNaN(date.getTime())) return; // Skip invalid dates

        const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}`;

        if (!monthlyData.has(monthKey)) {
          monthlyData.set(monthKey, { income: 0, expenses: 0 });
        }

        const amount = parseFloat(transaction.amount);
        if (isNaN(amount)) return; // Skip invalid amounts

        const monthData = monthlyData.get(monthKey);

        if (category.type === "income") {
          monthData.income += amount;
        } else {
          monthData.expenses += amount;
        }
      });
    });

    // Convert to arrays and sort by date
    const sortedEntries = Array.from(monthlyData.entries())
      .sort((a, b) => a[0].localeCompare(b[0]))
      .slice(-6); // Get last 6 months

    return sortedEntries;
  }

  formatMonthLabel(monthKey) {
    const [year, month] = monthKey.split("-");
    const date = new Date(parseInt(year), parseInt(month) - 1);
    return date.toLocaleDateString("en-US", {
      month: "short",
      year: "2-digit",
    });
  }

  createChart(canvas) {
    if (!window.Chart) {
      console.error("Chart.js not loaded");
      return;
    }

    const monthlyData = this.processData();

    const labels = monthlyData.map(([month]) => this.formatMonthLabel(month));
    const incomeData = monthlyData.map(([_, data]) => data.income || 0);
    const expensesData = monthlyData.map(([_, data]) => data.expenses || 0);

    const ctx = canvas.getContext("2d");
    return new window.Chart(ctx, {
      type: "bar",
      data: {
        labels: labels,
        datasets: [
          {
            label: "Income",
            data: incomeData,
            backgroundColor: "rgba(74, 222, 128, 0.8)", // green-400
            borderColor: "rgb(9, 9, 11)", // zinc-950
            borderWidth: 1,
          },
          {
            label: "Expenses",
            data: expensesData,
            backgroundColor: "rgba(248, 113, 113, 0.8)", // red-400
            borderColor: "rgb(9, 9, 11)", // zinc-950
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            grid: {
              color: "rgba(255, 255, 255, 0.1)",
            },
            ticks: {
              color: "#ffffff",
              font: {
                size: 12,
              },
            },
          },
          y: {
            grid: {
              color: "rgba(255, 255, 255, 0.1)",
            },
            beginAtZero: true,
            ticks: {
              color: "#ffffff",
              font: {
                size: 12,
              },
              callback: function (value) {
                return new Intl.NumberFormat("en-PH", {
                  style: "currency",
                  currency: "PHP",
                  maximumFractionDigits: 0,
                }).format(value);
              },
            },
          },
        },
        plugins: {
          legend: {
            position: "top",
            labels: {
              color: "#ffffff",
              padding: 20,
              font: {
                size: 14,
              },
            },
          },
          tooltip: {
            callbacks: {
              label: function (context) {
                const value = context.raw || 0;
                return `${context.dataset.label}: ${new Intl.NumberFormat(
                  "en-PH",
                  {
                    style: "currency",
                    currency: "PHP",
                  },
                ).format(value)}`;
              },
            },
          },
        },
        layout: {
          padding: {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20,
          },
        },
      },
    });
  }

  updateChart() {
    if (this.chart) {
      this.chart.destroy();
    }
    const canvas = this.querySelector("canvas");
    if (canvas) {
      this.chart = this.createChart(canvas);
    }
  }

  render() {
    const wrapper = document.createElement("div");
    wrapper.style.height = "15rem";
    wrapper.style.position = "relative";

    const canvas = document.createElement("canvas");
    canvas.id = "monthlyComparisonChart";
    wrapper.appendChild(canvas);

    this.innerHTML = "";
    this.appendChild(wrapper);

    if (window.Chart) {
      this.chart = this.createChart(canvas);
    }
  }
}

customElements.define("monthly-comparison-chart", MonthlyComparisonChart);

export default MonthlyComparisonChart;

================
File: src/scripts/components/ReadOnlyTransactionItem.js
================
class ReadOnlyTransactionItem extends HTMLElement {
  constructor() {
    super();
    this._transaction = null;
  }

  static get observedAttributes() {
    return ["name", "amount", "date"];
  }

  get transaction() {
    return this._transaction;
  }

  set transaction(value) {
    this._transaction = value;
    this.render();
  }

  connectedCallback() {
    this.render();
  }

  createFromTemplate() {
    const template = document.getElementById("readonly-transaction-template");
    const clone = template.content.cloneNode(true);

    if (this._transaction) {
      // Set transaction data
      const container = clone.querySelector("div");
      container.dataset.transactionId = this._transaction.id;

      clone.querySelector(".transaction-name").textContent =
        this._transaction.name;
      clone.querySelector(".transaction-amount").textContent =
        new Intl.NumberFormat("en-PH", {
          style: "currency",
          currency: "PHP",
        }).format(this._transaction.amount);
      clone.querySelector(".transaction-date").textContent = new Date(
        this._transaction.date,
      ).toLocaleDateString();

      // Add color coding based on transaction type
      const amountElement = clone.querySelector(".transaction-amount");
      if (this._transaction.type === "expense") {
        amountElement.classList.add("text-red-400");
      } else {
        amountElement.classList.add("text-green-400");
      }
    }

    return clone;
  }

  render() {
    this.innerHTML = "";
    const content = this.createFromTemplate();
    this.appendChild(content);
  }
}

customElements.define("readonly-transaction-item", ReadOnlyTransactionItem);

// Function to render recent transactions in the dashboard
function renderRecentTransactions(limit = 5) {
  const categories = JSON.parse(localStorage.getItem("categories")) || [];
  const transactionsContainer = document.querySelector("#recent-transactions");

  if (!transactionsContainer) return;

  // Clear existing transactions
  transactionsContainer.innerHTML = "";

  // Get all transactions from all categories
  const allTransactions = categories.reduce((acc, category) => {
    if (category.transactions) {
      // Add category type to each transaction
      const transactionsWithType = category.transactions.map((t) => ({
        ...t,
        type: category.type,
      }));
      return [...acc, ...transactionsWithType];
    }
    return acc;
  }, []);

  // Sort by date (most recent first)
  allTransactions.sort((a, b) => new Date(b.date) - new Date(a.date));

  // Take only the most recent transactions
  const recentTransactions = allTransactions.slice(0, limit);

  // Render each transaction
  recentTransactions.forEach((transaction, index) => {
    const transactionElement = document.createElement(
      "readonly-transaction-item",
    );
    transactionElement.transaction = transaction;
    // Add staggered animation delay based on index
    transactionElement.style.animationDelay = `${index * 100}ms`;
    transactionsContainer.appendChild(transactionElement);
  });
}

export { ReadOnlyTransactionItem, renderRecentTransactions };

================
File: src/scripts/components/TransactionItem.js
================
class TransactionItem extends HTMLElement {
  constructor() {
    super();
    this._transaction = null;
  }

  static get observedAttributes() {
    return ["name", "amount", "date"];
  }

  get transaction() {
    return this._transaction;
  }

  set transaction(value) {
    this._transaction = value;
    this.render();
  }

  connectedCallback() {
    this.render();
    this.setupEventListeners();
  }

  createFromTemplate() {
    const template = document.getElementById("transaction-template");
    const clone = template.content.cloneNode(true);
    const transactionDiv = clone.querySelector("div");

    if (this._transaction) {
      // Set transaction data
      transactionDiv.dataset.transactionId = this._transaction.id;
      clone.querySelector(".transaction-name").textContent =
        this._transaction.name;
      clone.querySelector(".transaction-amount").textContent =
        new Intl.NumberFormat("en-PH", {
          style: "currency",
          currency: "PHP",
        }).format(this._transaction.amount);
      clone.querySelector(".transaction-date").textContent = new Date(
        this._transaction.date,
      ).toLocaleDateString();
    }

    return clone;
  }

  handleDelete() {
    const confirmDialog = document.getElementById("confirm-dialog");
    const confirmMessage = document.getElementById("confirm-message");
    const confirmDelete = document.getElementById("confirm-delete");
    const confirmCancel = document.getElementById("confirm-cancel");
    const confirmClose = document.getElementById("confirm-dialog-close");

    confirmMessage.textContent =
      "Are you sure you want to delete this transaction?";

    const closeDialog = () => {
      confirmDialog.close();
      confirmDelete.removeEventListener("click", handleConfirm);
      confirmCancel.removeEventListener("click", handleCancel);
      confirmClose.removeEventListener("click", handleCancel);
    };

    const handleConfirm = () => {
      this.dispatchEvent(
        new CustomEvent("transactiondelete", {
          bubbles: true,
          detail: {
            transactionId: this._transaction.id,
          },
        }),
      );

      // Add fade out animation
      this.style.animation = "fadeOut 0.3s ease-out forwards";
      this.addEventListener("animationend", () => {
        this.remove();
      });

      closeDialog();
    };

    const handleCancel = () => {
      closeDialog();
    };

    confirmDelete.addEventListener("click", handleConfirm);
    confirmCancel.addEventListener("click", handleCancel);
    confirmClose.addEventListener("click", handleCancel);

    confirmDialog.showModal();
  }

  setupEventListeners() {
    const deleteButton = this.querySelector(".delete-transaction");
    if (deleteButton) {
      deleteButton.addEventListener("click", (e) => {
        e.stopPropagation();
        this.handleDelete();
      });
    }
  }

  render() {
    this.innerHTML = "";
    const content = this.createFromTemplate();
    this.appendChild(content);
  }
}

customElements.define("transaction-item", TransactionItem);

export default TransactionItem;

================
File: src/scripts/components/WeeklySpendingChart.js
================
class WeeklySpendingChart extends HTMLElement {
  constructor() {
    super();
    this.chart = null;
    this.loadChartJS();
  }

  async loadChartJS() {
    if (!window.Chart) {
      const script = document.createElement("script");
      script.src =
        "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js";
      script.async = true;
      script.onload = () => {
        this.render();
        window.addEventListener("resize", this.handleResize.bind(this));
      };
      document.head.appendChild(script);
    } else {
      this.render();
      window.addEventListener("resize", this.handleResize.bind(this));
    }
  }

  handleResize() {
    if (this.chart) {
      this.chart.resize();
    }
  }

  connectedCallback() {
    this.setupEventListeners();
    this.setupStyles();
  }

  disconnectedCallback() {
    if (this.chart) {
      this.chart.destroy();
    }
    window.removeEventListener("storage", this.updateChart);
    window.removeEventListener("resize", this.handleResize);
  }

  setupStyles() {
    this.style.display = "block";
    this.style.width = "100%";
    this.style.height = "100%";
    this.style.position = "relative";
  }

  setupEventListeners() {
    this.updateChart = this.updateChart.bind(this);
    window.addEventListener("storage", this.updateChart);
  }

  processData() {
    const categories = JSON.parse(localStorage.getItem("categories")) || [];
    const expenseCategories = categories.filter(
      (cat) => cat.type === "expense",
    );

    // Get the last 4 weeks
    const weeks = [];
    const now = new Date();
    for (let i = 0; i < 4; i++) {
      const weekStart = new Date(now);
      weekStart.setDate(now.getDate() - i * 7);
      weekStart.setHours(0, 0, 0, 0);
      weeks.unshift(weekStart);
    }

    // Initialize data structure
    const weeklyData = weeks.map((week) => ({
      week: week,
      categories: {},
    }));

    // Process transactions
    expenseCategories.forEach((category) => {
      if (!category.transactions) return;

      category.transactions.forEach((transaction) => {
        const transactionDate = new Date(transaction.date);
        const amount = parseFloat(transaction.amount);

        // Find which week this transaction belongs to
        const weekIndex = weeks.findIndex((week) => {
          const weekEnd = new Date(week);
          weekEnd.setDate(week.getDate() + 7);
          return transactionDate >= week && transactionDate < weekEnd;
        });

        if (weekIndex !== -1) {
          if (!weeklyData[weekIndex].categories[category.name]) {
            weeklyData[weekIndex].categories[category.name] = 0;
          }
          weeklyData[weekIndex].categories[category.name] += amount;
        }
      });
    });

    return {
      weeks: weeks,
      data: weeklyData,
      categories: expenseCategories.map((cat) => cat.name),
    };
  }

  generateColors(count) {
    const colors = [
      "#4ade80", // green-400
      "#f87171", // red-400
      "#60a5fa", // blue-400
      "#fbbf24", // amber-400
      "#a78bfa", // violet-400
      "#34d399", // emerald-400
      "#f472b6", // pink-400
      "#818cf8", // indigo-400
      "#fb923c", // orange-400
      "#2dd4bf", // teal-400
    ];

    while (colors.length < count) {
      const hue = (colors.length * 137.508) % 360;
      colors.push(`hsl(${hue}, 70%, 60%)`);
    }

    return colors;
  }

  createChart(canvas) {
    if (!window.Chart) {
      console.error("Chart.js not loaded");
      return;
    }

    const { weeks, data, categories } = this.processData();
    const colors = this.generateColors(categories.length);

    // Prepare datasets
    const datasets = categories.map((category, index) => ({
      label: category,
      data: data.map((week) => week.categories[category] || 0),
      backgroundColor: colors[index],
      borderColor: "rgb(9, 9, 11)", // zinc-950
      borderWidth: 1,
    }));

    // Format week labels
    const labels = weeks.map((week) => {
      const endOfWeek = new Date(week);
      endOfWeek.setDate(week.getDate() + 6);
      return `${week.toLocaleDateString("en-US", { month: "short", day: "numeric" })} - ${endOfWeek.toLocaleDateString("en-US", { day: "numeric" })}`;
    });

    const ctx = canvas.getContext("2d");
    return new window.Chart(ctx, {
      type: "bar",
      data: {
        labels: labels,
        datasets: datasets,
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            stacked: true,
            grid: {
              color: "rgba(255, 255, 255, 0.1)",
            },
            ticks: {
              color: "#ffffff",
              font: {
                size: 12,
              },
            },
          },
          y: {
            stacked: true,
            grid: {
              color: "rgba(255, 255, 255, 0.1)",
            },
            ticks: {
              color: "#ffffff",
              font: {
                size: 12,
              },
              callback: function (value) {
                return new Intl.NumberFormat("en-PH", {
                  style: "currency",
                  currency: "PHP",
                  maximumFractionDigits: 0,
                }).format(value);
              },
            },
          },
        },
        plugins: {
          legend: {
            position: "top",
            labels: {
              color: "#ffffff",
              padding: 20,
              font: {
                size: 12,
              },
            },
          },
          tooltip: {
            callbacks: {
              label: function (context) {
                const label = context.dataset.label || "";
                const value = context.parsed.y;
                return `${label}: ${new Intl.NumberFormat("en-PH", {
                  style: "currency",
                  currency: "PHP",
                }).format(value)}`;
              },
              footer: function (tooltipItems) {
                const total = tooltipItems.reduce(
                  (sum, item) => sum + item.parsed.y,
                  0,
                );
                return `Total: ${new Intl.NumberFormat("en-PH", {
                  style: "currency",
                  currency: "PHP",
                }).format(total)}`;
              },
            },
          },
        },
        layout: {
          padding: {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20,
          },
        },
      },
    });
  }

  updateChart() {
    if (this.chart) {
      this.chart.destroy();
    }
    const canvas = this.querySelector("canvas");
    if (canvas) {
      this.chart = this.createChart(canvas);
    }
  }

  render() {
    const wrapper = document.createElement("div");
    wrapper.style.height = "15rem";
    wrapper.style.position = "relative";

    const canvas = document.createElement("canvas");
    canvas.id = "weeklySpendingChart";
    wrapper.appendChild(canvas);

    this.innerHTML = "";
    this.appendChild(wrapper);

    if (window.Chart) {
      this.chart = this.createChart(canvas);
    }
  }
}

customElements.define("weekly-spending-chart", WeeklySpendingChart);

export default WeeklySpendingChart;

================
File: src/scripts/expenses.js
================
import { Category } from "./classes/Category.js";
import "./components/CategoryCard.js";
import "./components/TransactionItem.js";
import { initializeWithPlaceholderData } from "./utils/placeholderData.js";

// Get DOM elements
const openDialogBtn = document.getElementById("add-category-btn");
const addCategoryDialog = document.getElementById("add-category-dialog");
const categoryForm = addCategoryDialog.querySelector("form");
const submitCategoryBtn = document.getElementById("submit-category");
const categoriesContainer = document.getElementById("categories-container");

// Initialize categories array from localStorage or empty array if none exists
let categories = JSON.parse(localStorage.getItem("categories")) || [];

// Function to save categories to localStorage
function saveCategories() {
  localStorage.setItem("categories", JSON.stringify(categories));
}

// Function to render all categories
function renderCategories() {
  categoriesContainer.innerHTML = ""; // Clear existing cards

  // Sort categories to maintain consistent order
  const sortedCategories = [...categories].sort((a, b) =>
    a.name.localeCompare(b.name),
  );

  sortedCategories.forEach((category) => {
    // Ensure transactions are sorted by date
    if (category.transactions) {
      category.transactions.sort((a, b) => new Date(b.date) - new Date(a.date));
    }

    const categoryCard = document.createElement("category-card");
    categoryCard.category = category;
    categoriesContainer.appendChild(categoryCard);
  });
}

// Event handlers for custom events
document.addEventListener("transactionadded", (e) => {
  const { categoryName, transaction } = e.detail;
  const category = categories.find((c) => c.name === categoryName);

  if (category) {
    if (!category.transactions) {
      category.transactions = [];
    }

    // Check if transaction with this ID already exists
    const existingTransaction = category.transactions.find(
      (t) => t.id === transaction.id,
    );

    if (!existingTransaction) {
      category.transactions.push(transaction);
      saveCategories();
    }
  }
});

// Add transaction deletion event handler
document.addEventListener("transactiondelete", (e) => {
  const { categoryName, transactionId } = e.detail;
  const category = categories.find((c) => c.name === categoryName);

  if (category && category.transactions) {
    const transactionIndex = category.transactions.findIndex(
      (t) => t.id === transactionId,
    );

    if (transactionIndex > -1) {
      category.transactions.splice(transactionIndex, 1);
      saveCategories();
    }
  }
});

document.addEventListener("categorydelete", (e) => {
  const { categoryName } = e.detail;
  const categoryIndex = categories.findIndex((c) => c.name === categoryName);
  if (categoryIndex > -1) {
    categories.splice(categoryIndex, 1);
    saveCategories();
    renderCategories();
  }
});

// Form handling functions
function showError(inputElement, message) {
  const existingError =
    inputElement.parentElement.querySelector(".error-message");
  if (existingError) {
    existingError.remove();
  }

  const errorDiv = document.createElement("div");
  errorDiv.className = "error-message text-red-500 text-sm mt-1";
  errorDiv.textContent = message;
  inputElement.parentElement.appendChild(errorDiv);

  inputElement.classList.add("border", "border-red-500");
}

function clearAllErrors() {
  const errorMessages = categoryForm.querySelectorAll(".error-message");
  errorMessages.forEach((error) => error.remove());

  const inputs = categoryForm.querySelectorAll("input, select");
  inputs.forEach((input) => {
    input.classList.remove("border", "border-red-500");
  });
}

// Event Listeners
openDialogBtn.addEventListener("click", () => {
  clearAllErrors();
  categoryForm.reset();
  addCategoryDialog.showModal();
});

const closeDialogBtn = document.getElementById("add-category-close");
closeDialogBtn.addEventListener("click", () => {
  addCategoryDialog.close();
  clearAllErrors();
});

// Form submission handler
categoryForm.addEventListener("submit", (e) => {
  e.preventDefault();

  clearAllErrors();

  const nameInput = document.getElementById("name");
  const typeSelect = document.getElementById("type");

  const name = nameInput.value.trim();
  const type = typeSelect.value;

  let isValid = true;

  if (!name) {
    showError(nameInput, "Please enter a category name");
    isValid = false;
  }

  if (
    categories.some(
      (category) => category.name.toLowerCase() === name.toLowerCase(),
    )
  ) {
    showError(nameInput, "A category with this name already exists");
    isValid = false;
  }

  if (!isValid) return;

  // Create new category
  const newCategory = new Category(name, type);
  newCategory.transactions = [];

  // Add to categories array
  categories.push(newCategory);

  // Save to localStorage
  saveCategories();

  // Create and add new category card
  renderCategories();

  // Reset form and close dialog
  categoryForm.reset();
  clearAllErrors();
  addCategoryDialog.close();
});

// Initialize when the page loads
document.addEventListener("DOMContentLoaded", () => {
  initializeWithPlaceholderData();
  renderCategories();
});

================
File: src/scripts/index.js
================
import { formatCurrency, animateValue } from "./utils/helpers.js";
import { renderRecentTransactions } from "./components/ReadOnlyTransactionItem.js";
import "./components/CashFlowChart.js";
import "./components/ExpenseDIstributionChart.js";
import "./components/WeeklySpendingChart.js";
import "./components/MonthlyComparisonChart.js";
import "./components/IncomeExpenseDonutChart.js";
import { initializeWithPlaceholderData } from "./utils/placeholderData.js";

// Constants for time periods
const TIME_PERIODS = {
  TOTAL: "total",
  DAILY: "daily",
  WEEKLY: "weekly",
  MONTHLY: "monthly",
  YEARLY: "yearly",
};

// Function to check if a date is within the selected time period
function isDateInPeriod(date, selectedPeriod) {
  const today = new Date();
  const transactionDate = new Date(date);

  switch (selectedPeriod) {
    case TIME_PERIODS.TOTAL:
      // Include all transactions regardless of date
      return true;

    case TIME_PERIODS.DAILY:
      return (
        transactionDate.getDate() === today.getDate() &&
        transactionDate.getMonth() === today.getMonth() &&
        transactionDate.getFullYear() === today.getFullYear()
      );

    case TIME_PERIODS.WEEKLY:
      // Get the start of the current week (Sunday)
      const startOfWeek = new Date(today);
      startOfWeek.setDate(today.getDate() - today.getDay());
      startOfWeek.setHours(0, 0, 0, 0);
      return transactionDate >= startOfWeek;

    case TIME_PERIODS.MONTHLY:
      return (
        transactionDate.getMonth() === today.getMonth() &&
        transactionDate.getFullYear() === today.getFullYear()
      );

    case TIME_PERIODS.YEARLY:
      return transactionDate.getFullYear() === today.getFullYear();

    default:
      return false;
  }
}

// Calculate totals based on selected period
function calculateTotals(selectedPeriod) {
  const categories = JSON.parse(localStorage.getItem("categories")) || [];
  let income = 0;
  let expenses = 0;

  categories.forEach((category) => {
    if (!category.transactions) return;

    category.transactions.forEach((transaction) => {
      if (isDateInPeriod(transaction.date, selectedPeriod)) {
        const amount = parseFloat(transaction.amount);
        if (category.type === "income") {
          income += amount;
        } else if (category.type === "expense") {
          expenses += amount;
        }
      }
    });
  });

  return {
    income,
    expenses,
    balance: income - expenses,
  };
}

// Function to update all displays
function updateDisplays(selectedPeriod, animate = true) {
  const totals = calculateTotals(selectedPeriod);

  // Get elements
  const incomeElement = document.querySelector("#income");
  const expensesElement = document.querySelector("#expenses");
  const balanceElement = document.querySelector("#currentBalance");

  if (animate) {
    // Animate from 0 to target values
    animateValue(incomeElement, 0, totals.income);
    animateValue(expensesElement, 0, totals.expenses);
    animateValue(balanceElement, 0, totals.balance);
  } else {
    // Instant update without animation
    incomeElement.textContent = formatCurrency(totals.income);
    expensesElement.textContent = formatCurrency(totals.expenses);
    balanceElement.textContent = formatCurrency(totals.balance);
  }

  // Update balance color based on value
  if (totals.balance < 0) {
    balanceElement.classList.remove("text-green-400");
    balanceElement.classList.add("text-red-400");
  } else {
    balanceElement.classList.remove("text-red-400");
    balanceElement.classList.add("text-green-400");
  }

  // Update period text
  const periodText = document.querySelector("#period-text");
  if (periodText) {
    let description = "";
    switch (selectedPeriod) {
      case TIME_PERIODS.TOTAL:
        description = "Total";
        break;
      case TIME_PERIODS.DAILY:
        description = "Today";
        break;
      case TIME_PERIODS.WEEKLY:
        description = "This Week";
        break;
      case TIME_PERIODS.MONTHLY:
        description = "This Month";
        break;
      case TIME_PERIODS.YEARLY:
        description = "This Year";
        break;
    }
    periodText.textContent = description;
  }
}

// Initialize and set up event listeners
document.addEventListener("DOMContentLoaded", () => {
  initializeWithPlaceholderData();
  const periodSelect = document.querySelector("#period-select");

  // Set initial period and update displays with animation
  updateDisplays(periodSelect.value, true);
  // Render recent transactions
  renderRecentTransactions(10);

  // Listen for period changes
  periodSelect.addEventListener("change", (e) => {
    // Get current values before update
    const currentTotals = calculateTotals(e.target.value);

    // Get elements
    const incomeElement = document.querySelector("#income");
    const expensesElement = document.querySelector("#expenses");
    const balanceElement = document.querySelector("#currentBalance");

    // Get current numerical values
    const currentIncome = parseFloat(
      incomeElement.textContent.replace(/[^0-9.-]+/g, ""),
    );
    const currentExpenses = parseFloat(
      expensesElement.textContent.replace(/[^0-9.-]+/g, ""),
    );
    const currentBalance = parseFloat(
      balanceElement.textContent.replace(/[^0-9.-]+/g, ""),
    );

    // Animate from current values to new values
    animateValue(incomeElement, currentIncome, currentTotals.income);
    animateValue(expensesElement, currentExpenses, currentTotals.expenses);
    animateValue(balanceElement, currentBalance, currentTotals.balance);

    // Update other UI elements
    updateDisplays(e.target.value, false);
  });

  // Listen for storage changes
  window.addEventListener("storage", () => {
    updateDisplays(periodSelect.value, true);
    renderRecentTransactions(10);
  });
});

================
File: src/scripts/utils/helpers.js
================
// Format to Philippine peso
export const formatCurrency = (amount) => {
  return new Intl.NumberFormat("en-PH", {
    style: "currency",
    currency: "PHP",
  }).format(amount);
};

// New animation function for counting up numbers
export function animateValue(element, start, end, duration = 1000) {
  // Handle special cases where end is not a valid number
  if (isNaN(end)) {
    element.textContent = formatCurrency(0);
    return;
  }

  // Clear any existing animation
  if (element.currentAnimation) {
    cancelAnimationFrame(element.currentAnimation);
  }

  const startTime = performance.now();

  // Animation function
  function animate(currentTime) {
    const elapsedTime = currentTime - startTime;
    const progress = Math.min(elapsedTime / duration, 1);

    // Easing function for smooth animation
    const easeOutQuart = 1 - Math.pow(1 - progress, 4);

    // Calculate current value
    const currentValue = start + (end - start) * easeOutQuart;

    // Update element with formatted currency
    element.textContent = formatCurrency(currentValue);

    // Continue animation if not complete
    if (progress < 1) {
      element.currentAnimation = requestAnimationFrame(animate);
    }
  }

  // Start animation
  element.currentAnimation = requestAnimationFrame(animate);
}

================
File: src/scripts/utils/placeholderData.js
================
// Generate dates for the last 30 days
const generateRecentDates = (count) => {
  const dates = [];
  const today = new Date();
  for (let i = 0; i < count; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() - i);
    dates.unshift(date.toISOString().split("T")[0]);
  }
  return dates;
};

// Generate placeholder transactions for a category
const generateTransactions = (categoryType, dates) => {
  const transactions = [];
  const isExpense = categoryType === "expense";

  dates.forEach((date) => {
    // Add 1-3 transactions per day with 70% probability
    if (Math.random() < 0.7) {
      const transactionsPerDay = Math.floor(Math.random() * 3) + 1;

      for (let i = 0; i < transactionsPerDay; i++) {
        const baseAmount = isExpense
          ? Math.floor(Math.random() * 900) + 100 // Expenses: 100-1000
          : Math.floor(Math.random() * 4000) + 1000; // Income: 1000-5000

        transactions.push({
          id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
          name: "Sample Transaction " + (transactions.length + 1),
          amount: baseAmount,
          date: date,
        });
      }
    }
  });

  return transactions;
};

const placeholderData = {
  categories: [
    {
      name: "Salary",
      type: "income",
      transactions: generateTransactions("income", generateRecentDates(30)),
    },
    {
      name: "Freelance",
      type: "income",
      transactions: generateTransactions("income", generateRecentDates(30)),
    },
    {
      name: "Food",
      type: "expense",
      transactions: generateTransactions("expense", generateRecentDates(30)),
    },
    {
      name: "Transportation",
      type: "expense",
      transactions: generateTransactions("expense", generateRecentDates(30)),
    },
    {
      name: "Entertainment",
      type: "expense",
      transactions: generateTransactions("expense", generateRecentDates(30)),
    },
    {
      name: "Utilities",
      type: "expense",
      transactions: generateTransactions("expense", generateRecentDates(30)),
    },
  ],
};

// Function to initialize local storage with placeholder data
export function initializeWithPlaceholderData() {
  const existingData = localStorage.getItem("categories");

  if (!existingData || JSON.parse(existingData).length === 0) {
    localStorage.setItem(
      "categories",
      JSON.stringify(placeholderData.categories),
    );
  }
}

================
File: src/styles/output.css
================
*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
  --tw-contain-size:  ;
  --tw-contain-layout:  ;
  --tw-contain-paint:  ;
  --tw-contain-style:  ;
}

/*
! tailwindcss v3.4.15 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/

html,
:host {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  font-family: Inter, sans-serif;
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
  -webkit-tap-highlight-color: transparent;
  /* 7 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  /* 1 */
  font-feature-settings: normal;
  /* 2 */
  font-variation-settings: normal;
  /* 3 */
  font-size: 1em;
  /* 4 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  letter-spacing: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
input:where([type='button']),
input:where([type='reset']),
input:where([type='submit']) {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/

dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden]:where(:not([hidden="until-found"])) {
  display: none;
}

.container {
  width: 100%;
}

@media (min-width: 640px) {
  .container {
    max-width: 640px;
  }
}

@media (min-width: 768px) {
  .container {
    max-width: 768px;
  }
}

@media (min-width: 1024px) {
  .container {
    max-width: 1024px;
  }
}

@media (min-width: 1280px) {
  .container {
    max-width: 1280px;
  }
}

@media (min-width: 1536px) {
  .container {
    max-width: 1536px;
  }
}

.static {
  position: static;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.left-4 {
  left: 1rem;
}

.top-\[-0\.75rem\] {
  top: -0.75rem;
}

.top-\[-1rem\] {
  top: -1rem;
}

.z-10 {
  z-index: 10;
}

.col-span-12 {
  grid-column: span 12 / span 12;
}

.ml-auto {
  margin-left: auto;
}

.mr-auto {
  margin-right: auto;
}

.mt-1 {
  margin-top: 0.25rem;
}

.mt-2 {
  margin-top: 0.5rem;
}

.mt-4 {
  margin-top: 1rem;
}

.mt-8 {
  margin-top: 2rem;
}

.block {
  display: block;
}

.flex {
  display: flex;
}

.grid {
  display: grid;
}

.h-80 {
  height: 20rem;
}

.h-96 {
  height: 24rem;
}

.h-\[calc\(100\%-8rem\)\] {
  height: calc(100% - 8rem);
}

.h-72 {
  height: 18rem;
}

.h-64 {
  height: 16rem;
}

.h-56 {
  height: 14rem;
}

.h-48 {
  height: 12rem;
}

.w-full {
  width: 100%;
}

.cursor-pointer {
  cursor: pointer;
}

.resize {
  resize: both;
}

.grid-cols-12 {
  grid-template-columns: repeat(12, minmax(0, 1fr));
}

.grid-cols-3 {
  grid-template-columns: repeat(3, minmax(0, 1fr));
}

.grid-cols-4 {
  grid-template-columns: repeat(4, minmax(0, 1fr));
}

.flex-col {
  flex-direction: column;
}

.flex-wrap {
  flex-wrap: wrap;
}

.items-center {
  align-items: center;
}

.justify-end {
  justify-content: flex-end;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.gap-12 {
  gap: 3rem;
}

.gap-2 {
  gap: 0.5rem;
}

.gap-4 {
  gap: 1rem;
}

.gap-8 {
  gap: 2rem;
}

.self-center {
  align-self: center;
}

.overflow-y-auto {
  overflow-y: auto;
}

.overflow-x-hidden {
  overflow-x: hidden;
}

.overflow-x-scroll {
  overflow-x: scroll;
}

.overflow-y-scroll {
  overflow-y: scroll;
}

.rounded {
  border-radius: 0.25rem;
}

.rounded-full {
  border-radius: 9999px;
}

.rounded-lg {
  border-radius: 0.5rem;
}

.rounded-xl {
  border-radius: 0.75rem;
}

.border {
  border-width: 1px;
}

.border-x {
  border-left-width: 1px;
  border-right-width: 1px;
}

.border-green-400 {
  --tw-border-opacity: 1;
  border-color: rgb(74 222 128 / var(--tw-border-opacity, 1));
}

.border-red-500 {
  --tw-border-opacity: 1;
  border-color: rgb(239 68 68 / var(--tw-border-opacity, 1));
}

.bg-green-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(21 128 61 / var(--tw-bg-opacity, 1));
}

.bg-red-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(185 28 28 / var(--tw-bg-opacity, 1));
}

.bg-zinc-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(63 63 70 / var(--tw-bg-opacity, 1));
}

.bg-zinc-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(24 24 27 / var(--tw-bg-opacity, 1));
}

.bg-zinc-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(9 9 11 / var(--tw-bg-opacity, 1));
}

.p-1 {
  padding: 0.25rem;
}

.p-1\.5 {
  padding: 0.375rem;
}

.p-2 {
  padding: 0.5rem;
}

.p-3 {
  padding: 0.75rem;
}

.p-4 {
  padding: 1rem;
}

.p-6 {
  padding: 1.5rem;
}

.p-8 {
  padding: 2rem;
}

.px-1 {
  padding-left: 0.25rem;
  padding-right: 0.25rem;
}

.px-2 {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}

.px-32 {
  padding-left: 8rem;
  padding-right: 8rem;
}

.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}

.py-2 {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.py-4 {
  padding-top: 1rem;
  padding-bottom: 1rem;
}

.text-center {
  text-align: center;
}

.font-sans {
  font-family: Inter, sans-serif;
}

.text-2xl {
  font-size: 1.5rem;
  line-height: 2rem;
}

.text-4xl {
  font-size: 2.25rem;
  line-height: 2.5rem;
}

.text-sm {
  font-size: 0.875rem;
  line-height: 1.25rem;
}

.font-bold {
  font-weight: 700;
}

.text-green-400 {
  --tw-text-opacity: 1;
  color: rgb(74 222 128 / var(--tw-text-opacity, 1));
}

.text-red-400 {
  --tw-text-opacity: 1;
  color: rgb(248 113 113 / var(--tw-text-opacity, 1));
}

.text-red-500 {
  --tw-text-opacity: 1;
  color: rgb(239 68 68 / var(--tw-text-opacity, 1));
}

.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity, 1));
}

.opacity-0 {
  opacity: 0;
}

.filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.transition-colors {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.ease-out {
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
}

dialog::backdrop {
  background: rgba(0, 0, 0, 0.5);
  animation: fadeIn 0.3s ease-out;
}

dialog[open] {
  margin: auto;
}

.animate-dialog {
  animation: scaleUp 0.3s ease-out;
}

/* Transaction animations */

.animate-transaction {
  animation: fadeSlideIn 0.5s ease-out forwards;
}

.slide-in {
  animation: slideFromTop 0.3s ease-out forwards;
}

@keyframes fadeSlideIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleUp {
  from {
    transform: scale(0.8);
    opacity: 0;
  }

  to {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

.delete:hover {
  background-image: url("../assets/delete_fill.svg");
}

@keyframes fadeOut {
  from {
    opacity: 1;
    transform: translateX(0);
  }

  to {
    opacity: 0;
    transform: translateX(-20px);
  }
}

.delete-transaction:hover {
  background-color: rgb(127, 29, 29);
}

.hover\:bg-green-800:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(22 101 52 / var(--tw-bg-opacity, 1));
}

.hover\:bg-green-950:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(5 46 22 / var(--tw-bg-opacity, 1));
}

.hover\:bg-red-800:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(153 27 27 / var(--tw-bg-opacity, 1));
}

.hover\:bg-red-950:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(69 10 10 / var(--tw-bg-opacity, 1));
}

.hover\:bg-zinc-800:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(39 39 42 / var(--tw-bg-opacity, 1));
}

.hover\:underline:hover {
  text-decoration-line: underline;
}

@media (min-width: 640px) {
  .sm\:col-span-6 {
    grid-column: span 6 / span 6;
  }

  .sm\:w-64 {
    width: 16rem;
  }

  .sm\:w-min {
    width: -moz-min-content;
    width: min-content;
  }

  .sm\:justify-start {
    justify-content: flex-start;
  }
}

@media (min-width: 768px) {
  .md\:col-span-6 {
    grid-column: span 6 / span 6;
  }
}

@media (min-width: 1024px) {
  .lg\:col-span-6 {
    grid-column: span 6 / span 6;
  }
}

@media (min-width: 1280px) {
  .xl\:col-span-6 {
    grid-column: span 6 / span 6;
  }
}

@media (min-width: 1536px) {
  .\32xl\:col-span-4 {
    grid-column: span 4 / span 4;
  }

  .\32xl\:px-32 {
    padding-left: 8rem;
    padding-right: 8rem;
  }
}

================
File: src/styles/reset.css
================
/*
  Josh's Custom CSS Reset
  https://www.joshwcomeau.com/css/custom-css-reset/
*/

*,
*::before,
*::after {
  box-sizing: border-box;
}

* {
  margin: 0;
}

body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}

img,
picture,
video,
canvas,
svg {
  display: block;
  max-width: 100%;
}

input,
button,
textarea,
select {
  font: inherit;
}

p,
h1,
h2,
h3,
h4,
h5,
h6 {
  overflow-wrap: break-word;
}

p {
  text-wrap: pretty;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  text-wrap: balance;
}

#root,
#__next {
  isolation: isolate;
}

================
File: src/styles/style.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

dialog::backdrop {
  background: rgba(0, 0, 0, 0.5);
  animation: fadeIn 0.3s ease-out;
}

dialog[open] {
  margin: auto;
}

.animate-dialog {
  animation: scaleUp 0.3s ease-out;
}

/* Transaction animations */
.animate-transaction {
  animation: fadeSlideIn 0.5s ease-out forwards;
}

.slide-in {
  animation: slideFromTop 0.3s ease-out forwards;
}

@keyframes fadeSlideIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideFromTop {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleUp {
  from {
    transform: scale(0.8);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.delete:hover {
  background-image: url("../assets/delete_fill.svg");
}

@keyframes fadeOut {
  from {
    opacity: 1;
    transform: translateX(0);
  }
  to {
    opacity: 0;
    transform: translateX(-20px);
  }
}

.delete-transaction:hover {
  background-color: rgb(127, 29, 29);
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{html,js}"],
  theme: {
    extend: {},
    fontFamily: {
      sans: ["Inter", "sans-serif"],
      serif: ["'Source Serif 4'", "serif"],
    },
  },
  safelist: ["col-span-12, sm:col-span-6, 2xl:col-span-4"],
  plugins: [],
};
